import os
import telebot
from telebot import types
import yadisk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7922205304:AAG-YuGcaIlYdFgS_huR6vBe5fjGqHVAVC4"
YANDEX_TOKEN = "y0__xDJ7-CTARjCljgg0PvqtBMwt9GCjQgK-auQxCwObRrCQA2vdd7HIVWa4A"
WORK_DIRECTORY = "/–¢–∞—Ä–∏–∫–∞—Ç/–¢–∞—Ä–∏–∫–∞—Ç –ø–æ–ª–∏—Å—ã"  # –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TELEGRAM_TOKEN)
y = yadisk.YaDisk(token=YANDEX_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def create_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, is_persistent=True)
    markup.add(types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –ø–æ–ª–∏—Å'))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = """
 <b>–ü–æ–ª–∏—Å—ã —Ç–µ–ø–µ—Ä—å –∑–¥–µ—Å—å=)</b>

–î–ª—è –ø–æ–∏—Å–∫–∞:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"üîç –ù–∞–π—Ç–∏ –ø–æ–ª–∏—Å"</b> 
2. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞
"""
    bot.send_message(message.chat.id, welcome_text, 
                   parse_mode="HTML",
                   reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        if message.text == 'üîç –ù–∞–π—Ç–∏ –ø–æ–ª–∏—Å':
            msg = bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞:", 
                                 reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_search)
            return
            
        # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∫–Ω–æ–ø–∫—É)
        else:
            process_search(message)
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
                       reply_markup=create_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
def process_search(message):
    try:
        search_query = message.text.strip()
        
        if not search_query:
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª–∏—Å–∞", 
                           reply_markup=create_keyboard())
            return

        found_files = []
        for item in y.listdir(WORK_DIRECTORY):
            if item.name.lower().endswith('.pdf') and search_query.lower() in item.name.lower():
                found_files.append(item.name)

        if not found_files:
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª–∏—Å —Å –Ω–æ–º–µ—Ä–æ–º '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                           reply_markup=create_keyboard())
            return

        if len(found_files) == 1:
            send_pdf_file(message.chat.id, found_files[0])
        else:
            show_search_results(message.chat.id, found_files)
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
                       reply_markup=create_keyboard())

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def send_pdf_file(chat_id, file_name):
    try:
        file_path = f"{WORK_DIRECTORY}/{file_name}"
        local_path = f"temp_{file_name}"
        
        y.download(file_path, local_path)
        with open(local_path, "rb") as file:
            bot.send_document(chat_id, file, caption=f"üìÑ {file_name}")
        os.remove(local_path)
        
        bot.send_message(chat_id, "–Ω–∞–π—Ç–∏ –µ—â—ë?", 
                       reply_markup=create_keyboard())
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
                       reply_markup=create_keyboard())

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def show_search_results(chat_id, files):
    markup = types.InlineKeyboardMarkup()
    for file in files[:20]:
        markup.add(types.InlineKeyboardButton(
            text=file,
            callback_data=f"download_{file}"
        ))
    
    bot.send_message(chat_id, 
                   f"üîç –ù–∞–π–¥–µ–Ω–æ {len(files)} –ø–æ–ª–∏—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π:",
                   reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ñ–∞–π–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        if call.data.startswith('download_'):
            file_name = call.data.replace('download_', '')
            send_pdf_file(call.message.chat.id, file_name)
            bot.answer_callback_query(call.id, "–ü–æ–ª–∏—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
